name:          fgl
version:       5.5.1.0
license:       BSD3
license-file:  LICENSE
author:        Martin Erwig, Ivan Lazar Miljenovic
maintainer:    Ivan.Miljenovic@gmail.com
homepage:      http://web.engr.oregonstate.edu/~erwig/fgl/haskell
category:      Data Structures, Graphs
synopsis:      Martin Erwig's Functional Graph Library
description:
  The functional graph library for Haskell provides several modules that define inductive graphs and graph algorithms.
cabal-version: >= 1.6
build-type:    Simple
extra-source-files:
               ChangeLog

source-repository head
    type:         git
    location:     git://github.com/haskell/fgl.git

library {
    exposed-modules:
        Data.Graph.Inductive.Internal.Heap,
        Data.Graph.Inductive.Internal.Queue,
        Data.Graph.Inductive.Internal.RootPath,
        Data.Graph.Inductive.Internal.Thread,
        Data.Graph.Inductive.Basic,
        Data.Graph.Inductive.Example,
        Data.Graph.Inductive.Graph,
        Data.Graph.Inductive.Monad,
        Data.Graph.Inductive.NodeMap,
        Data.Graph.Inductive.PatriciaTree,
        Data.Graph.Inductive.Query,
        Data.Graph.Inductive.Tree,
        Data.Graph.Inductive.Monad.IOArray,
        Data.Graph.Inductive.Query.ArtPoint,
        Data.Graph.Inductive.Query.BCC,
        Data.Graph.Inductive.Query.BFS,
        Data.Graph.Inductive.Query.DFS,
        Data.Graph.Inductive.Query.Dominators,
        Data.Graph.Inductive.Query.GVD,
        Data.Graph.Inductive.Query.Indep,
        Data.Graph.Inductive.Query.MST,
        Data.Graph.Inductive.Query.MaxFlow,
        Data.Graph.Inductive.Query.MaxFlow2,
        Data.Graph.Inductive.Query.Monad,
        Data.Graph.Inductive.Query.SP,
        Data.Graph.Inductive.Query.TransClos,
        Data.Graph.Inductive

    other-modules:
        Paths_fgl

    build-depends:    base < 5, mtl, containers, array
}
