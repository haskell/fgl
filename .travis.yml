# NB: don't set `language: haskell` here

sudo: false

# The following enables several GHC versions to be tested; often it's enough to test only against the last release in a major GHC version. Feel free to omit lines listings versions you don't need/want testing for.
# Note that this setup uses Cabal sandboxes, so we need at least cabal-install-1.18.
matrix:
 fast_finish: true
 include:
  - env: CABALVER=1.18 GHCVER=7.0.4
    addons: {apt: {packages: [cabal-install-1.18, ghc-7.0.4], sources: [hvr-ghc]}}
  - env: CABALVER=1.18 GHCVER=7.2.2
    addons: {apt: {packages: [cabal-install-1.18, ghc-7.2.2], sources: [hvr-ghc]}}
  - env: CABALVER=1.18 GHCVER=7.4.2
    addons: {apt: {packages: [cabal-install-1.18, ghc-7.4.2], sources: [hvr-ghc]}}
  - env: CABALVER=1.18 GHCVER=7.6.3
    addons: {apt: {packages: [cabal-install-1.18, ghc-7.6.3], sources: [hvr-ghc]}}
  - env: CABALVER=1.20 GHCVER=7.8.4
    addons: {apt: {packages: [cabal-install-1.20, ghc-7.8.4], sources: [hvr-ghc]}}
  - env: CABALVER=1.22 GHCVER=7.10.1
    addons: {apt: {packages: [cabal-install-1.22, ghc-7.10.1],sources: [hvr-ghc]}}
  - env: CABALVER=head GHCVER=head
    addons: {apt: {packages: [cabal-install-head,ghc-head],  sources: [hvr-ghc]}}

 allow_failures:
  - env: CABALVER=head GHCVER=head

cache:
  directories:
    - $HOME/.cabal
    - $HOME/.ghc

before-cache:
  # Don't cache the Hackage index
  - rm -rf $HOME/cabal/packages/hackage.haskell.org

# Note: the distinction between `before_install` and `install` is not important.
before_install:
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
  - uname -a

install:
  - cabal --version
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - ghc --info
  - travis_retry cabal update
  - cabal install -j -O2 packdeps
  - cabal sandbox init
  - cabal install -j --only-dependencies --enable-tests --enable-benchmarks

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
 - cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cabal test
 - cabal check
 - cabal sdist   # tests that a source-distribution can be generated
 - cabal --version | grep --quiet '1.22';
   if [ $? -eq 0 ]; then
      cabal exec packdeps fgl.cabal;
   fi

# The following scriptlet checks that the resulting source distribution can be built & installed
 - function install_from_tarball {
   export SRC_TGZ=$(cabal-$CABALVER info . | awk '{print $2 ".tar.gz";exit}') ;
   if [ -f "dist/$SRC_TGZ" ]; then
      cabal install "dist/$SRC_TGZ" -v2;
   else
      echo "expected 'dist/$SRC_TGZ' not found";
      exit 1;
   fi
   }
 - install_from_tarball

# Check the fgl-arbitrary sub-package
 - cd fgl-arbitrary
 - cabal sandbox init
 - cabal sandbox add-source ../
 - cabal install --dependencies-only --enable-tests --enable-benchmarks
 - cabal configure --enable-tests --enable-benchmarks -v2
 - cabal build
 - cabal test
 - cabal check
 - cabal sdist
 - install_from_tarball
